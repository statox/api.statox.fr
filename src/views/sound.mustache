<!DOCTYPE html>
<html>
<head><title>Sound</title></head>
<body>
<p>There should be sound</p>

<p>Generated at {{ts}}</p>

<p>V 5</p>

<button onclick="playSound()">Play Sound</button>

<p id="debug">debug</p>

<script>
let msgId = 0;
function log(msg) {
    msgId++;
    document.getElementById('debug').innerHTML += `<br/>${msgId} - ${msg}`;
}

log('startup');

let audioCtx;

const playSound = () => {
    log(`playSound`);

    var oscillator = audioCtx.createOscillator();
    oscillator.frequency.setValueAtTime(440, audioCtx.currentTime); // value in hertz
    oscillator.type = 'square';
    oscillator.connect(audioCtx.destination);

    oscillator.start();
    log(`audioCtx.state ${audioCtx.state}`);

    oscillator.onended = log('oscillator ended');

    setTimeout(() => {
        log(`playSound stop`);
        oscillator.stop();
    }, 2000);
}

const fixAudioContext = async function (e) {
    log('in fixAudioContext');
    audioCtx = new (window.AudioContext || window.webkitAudioContext)();

    if (audioCtx) {
        log('audioCtx is defined');
        log(`audioCtx state before fix: ${audioCtx.state}`);

        // Create empty buffer
        var buffer = audioCtx.createBuffer(1, 1, 22050);
        var source = audioCtx.createBufferSource();
        source.buffer = buffer;
        // Connect to output (speakers)
        source.connect(audioCtx.destination);

        await audioCtx.resume();
        log(`audioCtx state after fix: ${audioCtx.state}`);

        // Play sound
        if (source.start) {
            source.start(0);
        } else if (source.play) {
            source.play(0);
        } else if (source.noteOn) {
            source.noteOn(0);
        }

        playSound();
    } else {
        log('audioCtx is NOT defined');
    }
    // Remove event
    document.removeEventListener('touchend', fixAudioContext);
};

document.addEventListener('touchend', fixAudioContext);
</script>

</body>
</html>
